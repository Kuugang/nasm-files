NUM 1-----------------------------------------------------------------------------
global _start

section .data
  num1: dd 10
  num2: dd 26

  smallestLine: db " ", 10, "The smallest is: "
  smallestLineLen: equ $-smallestLine

  largestLine: db " ", 10, "The largest is: "
  largestLineLen: equ $-largestLine

section .bss
  largest resd 2
  smallest resd 2
  buffer1 resb 16
  buffer2 resb 16

section .text
_start:

  mov eax, dword [num1]
  mov ebx, dword [num2]
  cmp eax, ebx
  jl endf 
  mov eax, dword [num2]
  mov ebx, dword [num1]
  endf:

  mov dword [smallest], eax
  mov dword [largest], ebx

  mov eax, 4
  mov ebx, 1
  mov ecx, smallestLine
  mov edx, smallestLineLen
  int 80h
  mov eax, dword [smallest]
  lea ecx, [buffer1 + 15]
  call convert_to_str
  mov eax, 4
  mov ebx, 1
  mov edx, 16
  int 80h

  mov eax, 4
  mov ebx, 1
  mov ecx, largestLine
  mov edx, largestLineLen
  int 80h
  mov eax, dword [largest]
  lea ecx, [buffer2 + 15]
  call convert_to_str
  mov eax, 4
  mov ebx, 1
  mov edx, 16
  int 80h

  mov eax, 1
  mov ebx, 0
  int 80h

convert_to_str:
  xor edx, edx 
  mov ebx, 10
  div ebx
  add edx, '0'
  mov [ecx], dl
  dec ecx

  test eax, eax
  jnz convert_to_str
  jmp return

return:
  ret


NUM 2-----------------------------------------------------------------------------


global _start

section .data
  num1: dd 10
  num2: dd 26
  num3: dd 55

  firstLine: db " ", 10, "The first is: "
  firstLineLen: equ $-firstLine

  secondLine: db " ", 10, "The second is: "
  secondLineLen: equ $-secondLine

  thirdLine: db " ", 10, "The third is: "
  thirdLineLen: equ $-thirdLine


section .bss
  first resd 2
  second resd 2
  third resd 2
  buffer resb 16

section .text
_start:

  mov eax, dword [num1]
  mov ebx, dword [num2]
  mov ecx, dword [num3]

  cmp eax, ebx
  jle point1
  mov edx, eax
  mov eax, ebx
  mov ebx, edx

point1:
  cmp eax, ecx
  jle point2
  mov edx, eax
  mov eax, ecx
  mov ecx, edx

point2:
  cmp ebx, ecx
  jle point3
  mov edx, ebx
  mov ebx, ecx
  mov ecx, edx

point3:
  mov dword [first], eax
  mov dword [second], ebx
  mov dword [third], ecx

  mov eax, 4
  mov ebx, 1
  mov ecx, firstLine
  mov edx, firstLineLen
  int 80h

  mov eax, dword [first]
  lea ecx, [buffer + 15]
  call convert_to_str
  mov eax, 4
  mov ebx, 1
  mov edx, 16
  int 80h

  mov eax, 4
  mov ebx, 1
  mov ecx, secondLine
  mov edx, secondLineLen
  int 80h

  mov eax, dword [second]
  lea ecx, [buffer + 15]
  call convert_to_str
  mov eax, 4
  mov ebx, 1
  mov edx, 16
  int 80h

  mov eax, 4
  mov ebx, 1
  mov ecx, thirdLine
  mov edx, thirdLineLen
  int 80h

  mov eax, dword [third]
  lea ecx, [buffer + 15]
  call convert_to_str
  mov eax, 4
  mov ebx, 1
  mov edx, 16
  int 80h

  mov eax, 1
    mov ebx, 0
    int 80h

convert_to_str:
  xor edx, edx 
  mov ebx, 10
  div ebx
  add edx, '0'
  mov [ecx], dl
  dec ecx

  test eax, eax
  jnz convert_to_str
  jmp return

return:
  ret

NUM 3-----------------------------------------------------------------------------



global _start

section .data

  headerLine: db " ", 10, "Input 2 numbers"
  headerLineLen: equ $-headerLine

  input1Line: db " ", 10, "1st number: "
  input1LineLen: equ $-input1Line
  input2Line: db " ", 10, "2nd number: "
  input2LineLen: equ $-input2Line

  firstLine: db " ", 10, "The smallest is: "
  firstLineLen: equ $-firstLine
  secondLine: db " ", 10, "The largest is: "
  secondLineLen: equ $-secondLine

section .bss
  input1 resd 16
  input2 resd 16
  num1 resd 2
  num2 resd 2
  first resd 2
  second resd 2
  buffer resb 16

section .text
_start:

  mov eax, 4
  mov ebx, 1
  mov ecx, headerLine
  mov edx, headerLineLen
  int 80h

  mov eax, 4
  mov ebx, 1
  mov ecx, input1Line
  mov edx, input1LineLen
  int 80h
  mov eax, 3
  mov ebx, 0
  mov ecx, input1
  mov edx, 16
  int 80h

  mov eax, 4
  mov ebx, 1
  mov ecx, input2Line
  mov edx, input2LineLen
  int 80h
  mov eax, 3
  mov ebx, 0
  mov ecx, input2
  mov edx, 16
  int 80h
  
  xor eax, eax
  lea esi, [input1]
  call convert_to_int
  mov dword [num1], eax

  xor eax, eax
  lea esi, [input2]
  call convert_to_int
  mov dword [num2], eax

  mov eax, dword [num1]
  mov ebx, dword [num2]

  cmp eax, ebx
  jle point1
  mov edx, eax
  mov eax, ebx
  mov ebx, edx
  point1:

  mov dword [first], eax
  mov dword [second], ebx

  mov eax, 4
  mov ebx, 1
  mov ecx, firstLine
  mov edx, firstLineLen
  int 80h
  mov eax, dword [first]
  lea ecx, [buffer + 15]
  call convert_to_str
  mov eax, 4
  mov ebx, 1
  mov edx, 16
  int 80h

  mov eax, 4
  mov ebx, 1
  mov ecx, secondLine
  mov edx, secondLineLen
  int 80h
  mov eax, dword [second]
  lea ecx, [buffer + 15]
  call convert_to_str
  mov eax, 4
  mov ebx, 1
  mov edx, 16
  int 80h

  mov eax, 1
  mov ebx, 0
  int 80h

convert_to_int:
  movzx edx, byte [esi]
  cmp edx, 0xA
  je return 

  imul eax, 10
  sub edx, '0'
  add eax, edx
  inc esi
  jmp convert_to_int

convert_to_str:
  xor edx, edx 
  mov ebx, 10
  div ebx
  add edx, '0'
  mov [ecx], dl
  dec ecx

  test eax, eax
  jnz convert_to_str
  jmp return

return:
  ret

NUM 4-----------------------------------------------------------------------------


global _start

section .data

  headerLine: db " ", 10, "Input 3 numbers"
  headerLineLen: equ $-headerLine

  input1Line: db " ", 10, "1st number: "
  input1LineLen: equ $-input1Line
  input2Line: db " ", 10, "2nd number: "
  input2LineLen: equ $-input2Line
  input3Line: db " ", 10, "3rd number: "
  input3LineLen: equ $-input3Line

  firstLine: db " ", 10, "The first is: "
  firstLineLen: equ $-firstLine
  secondLine: db " ", 10, "The second is: "
  secondLineLen: equ $-secondLine
  thirdLine: db " ", 10, "The third is: "
  thirdLineLen: equ $-thirdLine


section .bss
  input1 resd 16
  input2 resd 16
  input3 resd 16
  num1 resd 2
  num2 resd 2
  num3 resd 2
  first resd 2
  second resd 2
  third resd 2
  buffer resb 16

section .text
_start:

  mov eax, 4
  mov ebx, 1
  mov ecx, headerLine
  mov edx, headerLineLen
  int 80h

  mov eax, 4
  mov ebx, 1
  mov ecx, input1Line
  mov edx, input1LineLen
  int 80h
  mov eax, 3
  mov ebx, 0
  mov ecx, input1
  mov edx, 16
  int 80h

  mov eax, 4
  mov ebx, 1
  mov ecx, input2Line
  mov edx, input2LineLen
  int 80h
  mov eax, 3
  mov ebx, 0
  mov ecx, input2
  mov edx, 16
  int 80h
  
  mov eax, 4
  mov ebx, 1
  mov ecx, input3Line
  mov edx, input3LineLen
  int 80h
  mov eax, 3
  mov ebx, 0
  mov ecx, input3
  mov edx, 16
  int 80h

  xor eax, eax
  lea esi, [input1]
  call convert_to_int
  mov dword [num1], eax

  xor eax, eax
  lea esi, [input2]
  call convert_to_int
  mov dword [num2], eax

  xor eax, eax
  lea esi, [input3]
  call convert_to_int
  mov dword [num3], eax

  mov eax, dword [num1]
  mov ebx, dword [num2]
  mov ecx, dword [num3]

  cmp eax, ebx
  jle point1
  mov edx, eax
  mov eax, ebx
  mov ebx, edx
  point1:
  cmp eax, ecx
  jle point2
  mov edx, eax
  mov eax, ecx
  mov ecx, edx
  point2:
  cmp ebx, ecx
  jle point3
  mov edx, ebx
  mov ebx, ecx
  mov ecx, edx
  point3:

  mov dword [first], eax
  mov dword [second], ebx
  mov dword [third], ecx

  mov eax, 4
  mov ebx, 1
  mov ecx, firstLine
  mov edx, firstLineLen
  int 80h
  mov eax, dword [first]
  lea ecx, [buffer + 15]
  call convert_to_str
  mov eax, 4
  mov ebx, 1
  mov edx, 16
  int 80h

  mov eax, 4
  mov ebx, 1
  mov ecx, secondLine
  mov edx, secondLineLen
  int 80h
  mov eax, dword [second]
  lea ecx, [buffer + 15]
  call convert_to_str
  mov eax, 4
  mov ebx, 1
  mov edx, 16
  int 80h

  mov eax, 4
  mov ebx, 1
  mov ecx, thirdLine
  mov edx, thirdLineLen
  int 80h
  mov eax, dword [third]
  lea ecx, [buffer + 15]
  call convert_to_str
  mov eax, 4
  mov ebx, 1
  mov edx, 16
  int 80h

  mov eax, 1
  mov ebx, 0
  int 80h

convert_to_int:
  movzx edx, byte [esi]
  cmp edx, 0xA
  je return 

  imul eax, 10
  sub edx, '0'
  add eax, edx
  inc esi
  jmp convert_to_int

convert_to_str:
  xor edx, edx 
  mov ebx, 10
  div ebx
  add edx, '0'
  mov [ecx], dl
  dec ecx

  test eax, eax
  jnz convert_to_str
  jmp return

return:
  ret

NUM 5-----------------------------------------------------------------------------

global _start

section .data

  headerLine: db " ", 10, "Input a number: "
  headerLineLen: equ $-headerLine

  geaterOrEqualLine: db " ", 10, "The number is equal to or greater than than 10"
  geaterOrEqualLineLen: equ $-geaterOrEqualLine
  lessThanLine: db " ", 10, "The number is less that 10."
  lessThanLineLen: equ $-lessThanLine

section .bss
  input resd 16
  num resd 2
  first resd 2
  buffer resb 16

section .text
_start:

  mov eax, 4
  mov ebx, 1
  mov ecx, headerLine
  mov edx, headerLineLen
  int 80h
  mov eax, 3
  mov ebx, 0
  mov ecx, input
  mov edx, 16
  int 80h
  
  xor eax, eax
  lea esi, [input]
  call convert_to_int

  cmp eax, 10

  jge greater
  mov eax, 4
  mov ebx, 1
  mov ecx, lessThanLine
  mov edx, lessThanLineLen
  int 80h
  jmp endf
  greater:
  mov eax, 4
  mov ebx, 1
  mov ecx, geaterOrEqualLine
  mov edx, geaterOrEqualLineLen
  int 80h
  endf:

  mov eax, 1
  mov ebx, 0
  int 80h

convert_to_int:
  movzx edx, byte [esi]
  cmp edx, 0xA
  je return 

  imul eax, 10
  sub edx, '0'
  add eax, edx
  inc esi
  jmp convert_to_int

convert_to_str:
  xor edx, edx 
  mov ebx, 10
  div ebx
  add edx, '0'
  mov [ecx], dl
  dec ecx

  test eax, eax
  jnz convert_to_str
  jmp return

return:
  ret

NUM 6-----------------------------------------------------------------------------

global _start

section .data
  curr: dd 1

section .bss
  buffer: resd 16

section .text
_start:

  loop:
    mov eax, dword [curr]
    cmp eax, 10
    jg endLoop

    mov ebx, eax
    inc ebx
    mov dword [curr], ebx

    lea ecx, [buffer + 15]
    call convert_to_str
    mov eax, 4
    mov ebx, 1
    mov edx, 3
    int 80h
    jmp loop
  
  endLoop:
  
  mov eax, 1
  mov ebx, 0
  int 80h


convert_to_int:
  movzx edx, byte [esi]
  cmp edx, 0xA
  je return 

  imul eax, 10
  sub edx, '0'
  add eax, edx
  inc esi
  jmp convert_to_int

convert_to_str:
  xor edx, edx 
  mov ebx, 10
  div ebx
  add edx, '0'
  mov [ecx], dl
  dec ecx

  test eax, eax
  jnz convert_to_str
  jmp return

return:
  ret

NUM 7-----------------------------------------------------------------------------

global _start

section .data
  curr: dd 1

  newLine: db " ", 10
  newLineLen: equ $-newLine

section .bss
  buffer: resd 16

section .text
_start:

  loop:
    mov eax, dword [curr]
    cmp eax, 10
    jg endLoop

    mov ebx, eax
    inc ebx
    mov dword [curr], ebx

    lea ecx, [buffer + 15]
    call convert_to_str
    mov eax, 4
    mov ebx, 1
    mov edx, 16
    int 80h
    mov eax, 4
    mov ebx, 1
    mov ecx, newLine
    mov edx, newLineLen
    int 80h
    jmp loop
  
  endLoop:
  
  mov eax, 1
  mov ebx, 0
  int 80h


convert_to_int:
  movzx edx, byte [esi]
  cmp edx, 0xA
  je return 

  imul eax, 10
  sub edx, '0'
  add eax, edx
  inc esi
  jmp convert_to_int

convert_to_str:
  xor edx, edx 
  mov ebx, 10
  div ebx
  add edx, '0'
  mov [ecx], dl
  dec ecx

  test eax, eax
  jnz convert_to_str
  jmp return

return:
  ret

NUM 8-----------------------------------------------------------------------------

section .data
    curr: dd 1

    line: db "###########", 10
    lineLen: equ $-line

section .bss
    buffer: resd 16

section .text
    global _start

_start:
loop:
    mov eax, dword [curr]
    cmp eax, 10
    jg endLoop

    mov ebx, eax
    inc ebx
    mov dword [curr], ebx

    mov eax, 4
    mov ebx, 1
    mov ecx, line
    mov edx, lineLen
    int 80h
    jmp loop

endLoop:
    mov eax, 1
    mov ebx, 0
    int 80h


convert_to_int:
    movzx edx, byte [esi]
    cmp edx, 0xA
    je return 

    imul eax, 10
    sub edx, '0'
    add eax, edx
    inc esi
    jmp convert_to_int

convert_to_str:
    xor edx, edx 
    mov ebx, 10
    div ebx
    add edx, '0'
    mov [ecx], dl
    dec ecx

    test eax, eax
    jnz convert_to_str
    jmp return

return:
    ret

NUM 9-----------------------------------------------------------------------------


global _start

section .data
  curr: dd 1

  headerLine: db " ", 10, "Input a number: "
  headerLineLen: equ $-headerLine

section .bss
  buffer: resd 16
  input: resb 16
  endNum: resd 2

section .text
_start:

  mov eax, 4
  mov ebx, 1
  mov ecx, headerLine
  mov edx, headerLineLen
  int 80h
  mov eax, 3
  mov ebx, 0
  mov ecx, input
  mov edx, 16
  int 80h
  
  xor eax, eax
  lea esi, [input]
  call convert_to_int
  mov dword [endNum], eax

  loop:
    mov eax, dword [curr]
    cmp eax, dword [endNum]
    jg endLoop

    mov ebx, eax
    inc ebx
    mov dword [curr], ebx

    lea ecx, [buffer + 15]
    call convert_to_str
    mov eax, 4
    mov ebx, 1
    mov edx, 4
    int 80h
    jmp loop
  
  endLoop:
  
  mov eax, 1
  mov ebx, 0
  int 80h


convert_to_int:
  movzx edx, byte [esi]
  cmp edx, 0xA
  je return 

  imul eax, 10
  sub edx, '0'
  add eax, edx
  inc esi
  jmp convert_to_int

convert_to_str:
  xor edx, edx 
  mov ebx, 10
  div ebx
  add edx, '0'
  mov [ecx], dl
  dec ecx

  test eax, eax
  jnz convert_to_str
  jmp return

return:
  ret


NUM 10-----------------------------------------------------------------------------



global _start

section .data
  curr: dd 1

  oneHash: db "#"
  oneHashLen: equ $-oneHash

  headerLine: db " ", 10, "Input a number: "
  headerLineLen: equ $-headerLine

section .bss
  buffer: resd 16
  input: resb 16
  endNum: resd 2

section .text
_start:

  mov eax, 4
  mov ebx, 1
  mov ecx, headerLine
  mov edx, headerLineLen
  int 80h
  mov eax, 3
  mov ebx, 0
  mov ecx, input
  mov edx, 16
  int 80h
  
  xor eax, eax
  lea esi, [input]
  call convert_to_int
  mov dword [endNum], eax

  loop:
    mov eax, dword [curr]
    cmp eax, dword [endNum]
    jg endLoop

    mov ebx, eax
    inc ebx
    mov dword [curr], ebx

    mov eax, 4
    mov ebx, 1
    mov ecx, oneHash
    mov edx, oneHashLen
    int 80h

    jmp loop
  
  endLoop:
  
  mov eax, 1
  mov ebx, 0
  int 80h


convert_to_int:
  movzx edx, byte [esi]
  cmp edx, 0xA
  je return 

  imul eax, 10
  sub edx, '0'
  add eax, edx
  inc esi
  jmp convert_to_int

convert_to_str:
  xor edx, edx 
  mov ebx, 10
  div ebx
  add edx, '0'
  mov [ecx], dl
  dec ecx

  test eax, eax
  jnz convert_to_str
  jmp return

return:
  ret

NUM 11-----------------------------------------------------------------------------


global _start

section .data
  curr: dd 1

  oneHash: db "#"
  oneHashLen: equ $-oneHash

  headerLine: db " ", 10, "Enter a number: "
  headerLineLen: equ $-headerLine

  choiceLine: db "", 10, "Again? Y/N: "
  choiceLineLen: equ $-choiceLine

  thankYou: db "Thank you."
  thankYouLen: equ $-thankYou

section .bss
  buffer: resd 16
  input: resb 16
  endNum: resd 2
  choice: resb 2

section .text
_start:

  again:
  mov eax, 1
  mov dword [curr], eax

  mov eax, 4
  mov ebx, 1
  mov ecx, headerLine
  mov edx, headerLineLen
  int 80h
  mov eax, 3
  mov ebx, 0
  mov ecx, input
  mov edx, 16
  int 80h
  
  xor eax, eax
  lea esi, [input]
  call convert_to_int
  mov dword [endNum], eax

  loop:
    mov eax, dword [curr]
    cmp eax, dword [endNum]
    jg endLoop

    mov ebx, eax
    inc ebx
    mov dword [curr], ebx

    mov eax, 4
    mov ebx, 1
    mov ecx, oneHash
    mov edx, oneHashLen
    int 80h

    jmp loop
  endLoop:

  mov eax, 4
  mov ebx, 1
  mov ecx, choiceLine
  mov edx, choiceLineLen
  int 80h
  mov eax, 3
  mov ebx, 0
  mov ecx, choice
  mov edx, 2
  int 80h

  lea esi, [choice]
  movzx edx, byte [esi]
  cmp edx, 0x59
  je again
  
  mov eax, 4
  mov ebx, 1
  mov ecx, thankYou
  mov edx, thankYouLen
  int 80h
  mov eax, 1
  mov ebx, 0
  int 80h


convert_to_int:
  movzx edx, byte [esi]
  cmp edx, 0xA
  je return 

  imul eax, 10
  sub edx, '0'
  add eax, edx
  inc esi
  jmp convert_to_int

convert_to_str:
  xor edx, edx 
  mov ebx, 10
  div ebx
  add edx, '0'
  mov [ecx], dl
  dec ecx

  test eax, eax
  jnz convert_to_str
  jmp return

return:
  ret

NUM 12-----------------------------------------------------------------------------

global _start

section .data

  headerLine: db " ", 10, "Input 2 numbers"
  headerLineLen: equ $-headerLine
  
  choiceLine: db "", 10, "Again? Y/N: "
  choiceLineLen: equ $-choiceLine

  thankYou: db "Thank you."
  thankYouLen: equ $-thankYou

  input1Line: db " ", 10, "1st number: "
  input1LineLen: equ $-input1Line
  input2Line: db " ", 10, "2nd number: "
  input2LineLen: equ $-input2Line

  firstLine: db " ", 10, "The smallest is: "
  firstLineLen: equ $-firstLine
  secondLine: db " ", 10, "The largest is: "
  secondLineLen: equ $-secondLine


section .bss
  choice: resb 2
  input1 resd 16
  input2 resd 16
  num1 resd 2
  num2 resd 2
  first resd 2
  second resd 2
  buffer resb 16

section .text
_start:

  again:
  mov eax, 4
  mov ebx, 1
  mov ecx, headerLine
  mov edx, headerLineLen
  int 80h

  mov eax, 4
  mov ebx, 1
  mov ecx, input1Line
  mov edx, input1LineLen
  int 80h
  mov eax, 3
  mov ebx, 0
  mov ecx, input1
  mov edx, 16
  int 80h

  mov eax, 4
  mov ebx, 1
  mov ecx, input2Line
  mov edx, input2LineLen
  int 80h
  mov eax, 3
  mov ebx, 0
  mov ecx, input2
  mov edx, 16
  int 80h
  
  xor eax, eax
  lea esi, [input1]
  call convert_to_int
  mov dword [num1], eax

  xor eax, eax
  lea esi, [input2]
  call convert_to_int
  mov dword [num2], eax

  mov eax, dword [num1]
  mov ebx, dword [num2]

  cmp eax, ebx
  jle point1
  mov edx, eax
  mov eax, ebx
  mov ebx, edx
  point1:

  mov dword [first], eax
  mov dword [second], ebx

  mov eax, 4
  mov ebx, 1
  mov ecx, firstLine
  mov edx, firstLineLen
  int 80h
  mov eax, dword [first]
  lea ecx, [buffer + 15]
  call convert_to_str
  mov eax, 4
  mov ebx, 1
  mov edx, 16
  int 80h

  mov eax, 4
  mov ebx, 1
  mov ecx, secondLine
  mov edx, secondLineLen
  int 80h
  mov eax, dword [second]
  lea ecx, [buffer + 15]
  call convert_to_str
  mov eax, 4
  mov ebx, 1
  mov edx, 16
  int 80h

  mov eax, 4
  mov ebx, 1
  mov ecx, choiceLine
  mov edx, choiceLineLen
  int 80h
  mov eax, 3
  mov ebx, 0
  mov ecx, choice
  mov edx, 2
  int 80h

  lea esi, [choice]
  movzx edx, byte [esi]
  cmp edx, 0x59
  je again
  
  mov eax, 4
  mov ebx, 1
  mov ecx, thankYou
  mov edx, thankYouLen
  int 80h
  mov eax, 1
  mov ebx, 0
  int 80h

convert_to_int:
  movzx edx, byte [esi]
  cmp edx, 0xA
  je return 

  imul eax, 10
  sub edx, '0'
  add eax, edx
  inc esi
  jmp convert_to_int

convert_to_str:
  xor edx, edx 
  mov ebx, 10
  div ebx
  add edx, '0'
  mov [ecx], dl
  dec ecx

  test eax, eax
  jnz convert_to_str
  jmp return

return:
  ret

NUM 13-----------------------------------------------------------------------------


global _start

section .data

  headerLine: db "----", 10, "Input 3 numbers"
  headerLineLen: equ $-headerLine
  
  choiceLine: db "", 10, "Again? Y/N: "
  choiceLineLen: equ $-choiceLine

  thankYou: db "Thank you."
  thankYouLen: equ $-thankYou

  input1Line: db 10, "1st number: "
  input1LineLen: equ $-input1Line
  input2Line: db 10, "2nd number: "
  input2LineLen: equ $-input2Line
  input3Line: db 10, "3rd number: "
  input3LineLen: equ $-input3Line

  firstLine: db 10, "The first is: "
  firstLineLen: equ $-firstLine
  secondLine: db 10, "The second is: "
  secondLineLen: equ $-secondLine
  thirdLine: db 10, "The third is: "
  thirdLineLen: equ $-thirdLine


section .bss
  choice: resb 2
  input1 resd 16
  input2 resd 16
  input3 resd 16
  num1 resd 2
  num2 resd 2
  num3 resd 2
  first resd 2
  second resd 2
  third resd 2
  buffer resb 16

section .text
_start:

  again:
  mov eax, 4
  mov ebx, 1
  mov ecx, headerLine
  mov edx, headerLineLen
  int 80h

  mov eax, 4
  mov ebx, 1
  mov ecx, input1Line
  mov edx, input1LineLen
  int 80h
  mov eax, 3
  mov ebx, 0
  mov ecx, input1
  mov edx, 16
  int 80h

  mov eax, 4
  mov ebx, 1
  mov ecx, input2Line
  mov edx, input2LineLen
  int 80h
  mov eax, 3
  mov ebx, 0
  mov ecx, input2
  mov edx, 16
  int 80h

  mov eax, 4
  mov ebx, 1
  mov ecx, input3Line
  mov edx, input3LineLen
  int 80h
  mov eax, 3
  mov ebx, 0
  mov ecx, input3
  mov edx, 16
  int 80h
  
  xor eax, eax
  lea esi, [input1]
  call convert_to_int
  mov dword [num1], eax

  xor eax, eax
  lea esi, [input2]
  call convert_to_int
  mov dword [num2], eax

  xor eax, eax
  lea esi, [input3]
  call convert_to_int
  mov dword [num3], eax

  mov eax, dword [num1]
  mov ebx, dword [num2]
  mov ecx, dword [num3]

  cmp eax, ebx
  jle point1
  mov edx, eax
  mov eax, ebx
  mov ebx, edx
  point1:
  cmp eax, ecx
  jle point2
  mov edx, eax
  mov eax, ecx
  mov ecx, edx
  point2:
  cmp ebx, ecx
  jle point3
  mov edx, ebx
  mov ebx, ecx
  mov ecx, edx
  point3:

  mov dword [first], eax
  mov dword [second], ebx
  mov dword [third], ecx

  mov eax, 4
  mov ebx, 1
  mov ecx, firstLine
  mov edx, firstLineLen
  int 80h
  mov eax, dword [first]
  lea ecx, [buffer + 15]
  call convert_to_str
  mov eax, 4
  mov ebx, 1
  mov edx, 16
  int 80h

  mov eax, 4
  mov ebx, 1
  mov ecx, secondLine
  mov edx, secondLineLen
  int 80h
  mov eax, dword [second]
  lea ecx, [buffer + 15]
  call convert_to_str
  mov eax, 4
  mov ebx, 1
  mov edx, 16
  int 80h

  mov eax, 4
  mov ebx, 1
  mov ecx, thirdLine
  mov edx, thirdLineLen
  int 80h
  mov eax, dword [third]
  lea ecx, [buffer + 15]
  call convert_to_str
  mov eax, 4
  mov ebx, 1
  mov edx, 16
  int 80h


  mov eax, 4
  mov ebx, 1
  mov ecx, choiceLine
  mov edx, choiceLineLen
  int 80h
  mov eax, 3
  mov ebx, 0
  mov ecx, choice
  mov edx, 2
  int 80h

  lea esi, [choice]
  movzx edx, byte [esi]
  cmp edx, 0x59
  je again
  
  mov eax, 4
  mov ebx, 1
  mov ecx, thankYou
  mov edx, thankYouLen
  int 80h
  mov eax, 1
  mov ebx, 0
  int 80h


convert_to_int:
  movzx edx, byte [esi]
  cmp edx, 0xA
  je return 

  imul eax, 10
  sub edx, '0'
  add eax, edx
  inc esi
  jmp convert_to_int

convert_to_str:
  xor edx, edx 
  mov ebx, 10
  div ebx
  add edx, '0'
  mov [ecx], dl
  dec ecx

  test eax, eax
  jnz convert_to_str
  jmp return

return:
  ret

NUM 14-----------------------------------------------------------------------------
section .data
    headerLine db " ", 10, "Input a number: "
    headerLineLen equ $-headerLine

    choiceLine db "", 10, "Again? Y/N: "
    choiceLineLen equ $-choiceLine

    thankYou db "Thank you."
    thankYouLen equ $-thankYou

    geaterOrEqualLine db " ", 10, "The number is equal to or greater than than 10"
    geaterOrEqualLineLen equ $-geaterOrEqualLine
    lessThanLine db " ", 10, "The number is less that 10."
    lessThanLineLen equ $-lessThanLine

section .bss
    input resd 16
    num resd 2
    first resd 2
    buffer resb 16
    choice resb 2

section .text
    global _start

_start:

    again:

    mov eax, 4
    mov ebx, 1
    mov ecx, headerLine
    mov edx, headerLineLen
    int 80h
    mov eax, 3
    mov ebx, 0
    mov ecx, input
    mov edx, 16
    int 80h
  
    xor eax, eax
    lea esi, [input]
    call convert_to_int

    cmp eax, 10

    jge greater
    mov eax, 4
    mov ebx, 1
    mov ecx, lessThanLine
    mov edx, lessThanLineLen
    int 80h
    jmp endf
    greater:
    mov eax, 4
    mov ebx, 1
    mov ecx, geaterOrEqualLine
    mov edx, geaterOrEqualLineLen
    int 80h
    endf:

    mov eax, 4
    mov ebx, 1
    mov ecx, choiceLine
    mov edx, choiceLineLen
    int 80h
    mov eax, 3
    mov ebx, 0
    mov ecx, choice
    mov edx, 2
    int 80h

    lea esi, [choice]
    movzx edx, byte [esi]
    cmp edx, 0x59
    je again
  
    mov eax, 4
    mov ebx, 1
    mov ecx, thankYou
    mov edx, thankYouLen
    int 80h
    mov eax, 1
    mov ebx, 0
    int 80h

convert_to_int:
    movzx edx, byte [esi]
    cmp edx, 0xA
    je return 

    imul eax, 10
    sub edx, '0'
    add eax, edx
    inc esi
    jmp convert_to_int

convert_to_str:
    xor edx, edx 
    mov ebx, 10
    div ebx
    add edx, '0'
    mov [ecx], dl
    dec ecx

    test eax, eax
    jnz convert_to_str
    jmp return

return:
    ret

NUM 15-----------------------------------------------------------------------------

section .data
    menu: db "-------", 10, "Main Menu", 10, "1. Addition", 10, "2. Subtraction", 10, "3. Multiplication", 10, "4.Division", 10, "5.Exit", 10, "Enter choice:"
    menuLen: equ $-menu

    additionLine: db "Addition."
    additionLineLen: equ $-additionLine
    subtractionLine: db "Subtraction."
    subtractionLineLen: equ $-subtractionLine
    multiplicationLine: db "Multiplication."
    multiplicationLineLen: equ $-multiplicationLine
    divisionLine: db "Division."
    divisionLineLen: equ $-divisionLine
    exitLine: db "Exiting program. Thank you."
    exitLineLen: equ $-exitLine
    invalidChoiceLine: db "Invalid choice!"
    invalidChoiceLineLen: equ $-invalidChoiceLine

section .bss
    choice resb 1

section .text
    global _start

_start:

again:

    mov eax, 4
    mov ebx, 1
    mov ecx, menu
    mov edx, menuLen
    int 80h
    mov eax, 3
    mov ebx, 0
    mov ecx, choice
    mov edx, 2
    int 80h

    lea esi, [choice]
    movzx edx, byte [esi]

    cmp edx, 0x31 
    je runAddition

    cmp edx, 0x32
    je runSubtraction

    cmp edx, 0x33 
    je runMultiplication

    cmp edx, 0x34 
    je runDivision

    cmp edx, 0x35 
    je runExit

    jmp runInvalid

    endf:
    mov eax, 1
    mov ebx, 0
    int 80h

runAddition:
    mov eax, 4
    mov ebx, 1
    mov ecx, additionLine
    mov edx, additionLineLen
    int 80h


    


    jmp again

runSubtraction:
    mov eax, 4
    mov ebx, 1
    mov ecx, subtractionLine
    mov edx, subtractionLineLen
    int 80h
    jmp again

runMultiplication:
    mov eax, 4
    mov ebx, 1
    mov ecx, multiplicationLine
    mov edx, multiplicationLineLen
    int 80h
    jmp again

runDivision:
    mov eax, 4
    mov ebx, 1
    mov ecx, divisionLine
    mov edx, divisionLineLen
    int 80h
    jmp again

runExit:
    mov eax, 4
    mov ebx, 1
    mov ecx, exitLine
    mov edx, exitLineLen
    int 80h
    jmp endf

runInvalid:
    mov eax, 4
    mov ebx, 1
    mov ecx, invalidChoiceLine
    mov edx, invalidChoiceLineLen
    int 80h
    jmp again


convert_to_int:
    movzx edx, byte [esi]
    cmp edx, 0xA
    je return 

    imul eax, 10
    sub edx, '0'
    add eax, edx
    inc esi
    jmp convert_to_int

convert_to_str:
    xor edx, edx 
    mov ebx, 10
    div ebx
    add edx, '0'
    mov [ecx], dl
    dec ecx

    test eax, eax
    jnz convert_to_str
    jmp return

return:
    ret

NUM 16-----------------------------------------------------------------------------
section .data
    menu: db "-------", 10, "Main Menu", 10, "1. Addition", 10, "2. Subtraction", 10, "3. Multiplication", 10, "4.Division", 10, "5.Exit", 10, "Enter choice: "
    menuLen: equ $-menu

    headerLine: db " ", 10, "Input 2 numbers"
    headerLineLen: equ $-headerLine

    input1Line: db " ", 10, "1st number: "
    input1LineLen: equ $-input1Line
    input2Line: db " ", 10, "2nd number: "
    input2LineLen: equ $-input2Line

    additionLine: db "Addition."
    additionLineLen: equ $-additionLine
    subtractionLine: db "Subtraction."
    subtractionLineLen: equ $-subtractionLine
    multiplicationLine: db "Multiplication."
    multiplicationLineLen: equ $-multiplicationLine
    divisionLine: db "Division."
    divisionLineLen: equ $-divisionLine
    exitLine: db "Exiting program. Thank you."
    exitLineLen: equ $-exitLine
    invalidChoiceLine: db "Invalid choice!"
    invalidChoiceLineLen: equ $-invalidChoiceLine

    additionResLine: db "Sum is "
    additionResLineLen: equ $-additionResLine
    subtractionResLine: db "Difference is "
    subtractionResLineLen: equ $-subtractionResLine
    multiplicationResLine: db "Product is "
    multiplicationResLineLen: equ $-multiplicationResLine
    divisionResLine: db "Quotient is "
	divisionResLineLen: equ $-divisionResLine

    newLine db 10

section .bss
    input1 resd 16
    input2 resd 16
    num1 resd 2
    num2 resd 2
    first resd 2
    second resd 2
    buffer resb 16
    choice resb 1
    result resb 16

section .text
    global _start

_start:

    again:

    mov eax, 4
    mov ebx, 1
    mov ecx, menu
    mov edx, menuLen
    int 80h

    mov eax, 3
    mov ebx, 0
    mov ecx, choice
    mov edx, 2
    int 80h

    lea esi, [choice]
    movzx edx, byte [esi]

    cmp edx, 0x31 
    je runAddition

    cmp edx, 0x32
    je runSubtraction

    cmp edx, 0x33 
    je runMultiplication

    cmp edx, 0x34 
    je runDivision

    cmp edx, 0x35 
    je runExit

    jmp runInvalid

    endf:
    mov eax, 1
    mov ebx, 0
    int 80h

_writeResult:
    mov eax, [result]
    lea edi, [buffer+15]
    mov byte [edi], 10
    convert:
        dec edi
        xor edx, edx
        mov ecx, 10
        div ecx
        add dl, '0'
        mov [edi], dl
        test eax, eax
        jnz convert

    mov eax, 4
    mov ebx, 1
    lea ecx, [edi]
    lea edx, [buffer+16]
    sub edx, ecx
    int 80h
    ret

runAddition:
    mov eax, 4
    mov ebx, 1
    mov ecx, additionLine
    mov edx, additionLineLen
    int 80h

    call grabTwoNums
    
    add eax, ebx
    mov [result], eax
    call _writeResult

    
    jmp again

runSubtraction:
    mov eax, 4
    mov ebx, 1
    mov ecx, subtractionLine
    mov edx, subtractionLineLen
    int 80h
    
    call grabTwoNums

    sub eax, ebx
    mov [result], eax
    call _writeResult

    jmp again

runMultiplication:
    mov eax, 4
    mov ebx, 1
    mov ecx, multiplicationLine
    mov edx, multiplicationLineLen
    int 80h

    call grabTwoNums

    imul ebx

    mov [result], eax
    call _writeResult

    jmp again


runDivision:
    mov eax, 4
    mov ebx, 1
    mov ecx, divisionLine
    mov edx, divisionLineLen
    int 80h

    call grabTwoNums

    xor edx, edx
    div ebx

    mov [result], eax
    call _writeResult

    jmp again

runExit:
    mov eax, 4
    mov ebx, 1
    mov ecx, exitLine
    mov edx, exitLineLen
    int 80h
    jmp endf

runInvalid:
    mov eax, 4
    mov ebx, 1
    mov ecx, invalidChoiceLine
    mov edx, invalidChoiceLineLen
    int 80h
    jmp again


convert_to_str:
    xor edx, edx 
    mov ebx, 10
    div ebx
    add edx, '0'
    mov [ecx], dl
    dec ecx

    test eax, eax
    jnz convert_to_str
    jmp return

convert_to_int:
    movzx edx, byte [esi]
    cmp edx, 0xA
    je return 

    imul eax, 10
    sub edx, '0'
    add eax, edx
    inc esi
    jmp convert_to_int


grabTwoNums:
    mov eax, 4
    mov ebx, 1
    mov ecx, headerLine
    mov edx, headerLineLen
    int 80h

    mov eax, 4
    mov ebx, 1
    mov ecx, input1Line
    mov edx, input1LineLen
    int 80h
    mov eax, 3
    mov ebx, 0
    mov ecx, input1
    mov edx, 16
    int 80h

    mov eax, 4
    mov ebx, 1
    mov ecx, input2Line
    mov edx, input2LineLen
    int 80h
    mov eax, 3
    mov ebx, 0
    mov ecx, input2
    mov edx, 16
    int 80h
  
    xor eax, eax
    lea esi, [input1]
    call convert_to_int
    mov edi, num1
    mov dword [num1], eax

    xor eax, eax
    lea esi, [input2]
    call convert_to_int
    mov edi, num1
    mov dword [num2], eax

    mov eax, dword [num1]
    mov ebx, dword [num2]

return:
    ret